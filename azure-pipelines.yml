#
# Copyright (c) 2019-2020, Lawrence Livermore National Security, LLC and
# other Serac Project Developers. See the top-level COPYRIGHT file for details.
#
# SPDX-License-Identifier: (BSD-3-Clause)
#
parameters:
- name: BUILD_MAC
  default: false
  type: boolean

jobs:
- job: OSX_Build_and_Test
  # https://github.com/actions/virtual-environments/blob/main/images/macos/macos-10.15-Readme.md
  variables:
    DO_BUILD: 'yes'
    DO_TEST: 'yes'
    DO_CLEAN: 'no'
    SYS_TYPE: 'darwin-x86_64'
    COMPILER: 'clang++'
    ON_DEVELOP: $[eq(variables['Build.SourceBranch'], 'refs/heads/develop')]
    ON_MAIN: $[eq(variables['Build.SourceBranch'], 'refs/heads/main')]
    IS_MERGE: $[or(variables.ON_DEVELOP, variables.ON_MAIN)]
    RUN_MAC: $[or(variables.IS_MERGE, eq('${{ parameters.BUILD_MAC }}', true))]
  condition: eq(variables.RUN_MAC, true)
  pool:
    vmImage: 'macOS-latest'
  steps:
  - checkout: self
    clean: true
    submodules: recursive
  - script:  |
      ls
      pwd
      echo "./scripts/llnl/build_tpls.py --directory $(Build.Repository.LocalPath)/../serac_tpls"
      ./scripts/llnl/build_tpls.py --directory $(Build.Repository.LocalPath)/../serac_tpls
      ls 
      pwd
      echo "./scripts/llnl/build_src.py"
      ./scripts/llnl/build_src.py
      ls
      pwd

    displayName: '$(TEST_TARGET) Build & Test'
  - task: PublishTestResults@2
    inputs:
      testResultsFormat: 'cTest'
      testResultsFiles: '**/Test.xml'
      testRunTitle: '$(TEST_TARGET) Tests'
      failTaskOnFailedTests: true

- job: Build_and_Test
  variables:
    DO_BUILD: 'yes'
    DO_TEST: 'yes'
    DO_CLEAN: 'no'

  strategy:
    matrix:
      linux_gcc8:
          VM_ImageName: 'ubuntu-16.04'
          Compiler_ImageName: 'seracllnl/tpls:gcc-8'
          CMAKE_EXTRA_FLAGS: ''
          COMPILER: 'g++'
          TEST_TARGET: 'linux_gcc8'
          HOST_CONFIG: 'docker-linux-ubuntu16.04-x86_64-gcc@8.1.0.cmake'
      linux_clang10:
          VM_ImageName: 'ubuntu-18.04'
          Compiler_ImageName: 'seracllnl/tpls:clang-10'
          CMAKE_EXTRA_FLAGS: ''
          COMPILER: 'clang++'
          TEST_TARGET: 'linux_clang10'
          HOST_CONFIG: 'docker-linux-ubuntu18.04-x86_64-clang@10.0.0.cmake'

  pool:
    vmImage: $(VM_ImageName)

  steps:
  - checkout: self
    clean: true
    submodules: recursive
  - script:  |
      echo " -e $TEST_TARGET -e $COMPILER -e $DO_BUILD -e $DO_TEST -e $CMAKE_EXTRA_FLAGS $(Compiler_ImageName) ./scripts/llnl/build_src.py --host-config $HOST_CONFIG"
      docker run --rm -v `pwd`:/home/serac/serac -e TEST_TARGET -e COMPILER -e DO_BUILD -e DO_TEST -e DO_CLEAN -e HOST_CONFIG -e CMAKE_EXTRA_FLAGS $(Compiler_ImageName) ./serac/scripts/llnl/build_src.py --host-config $HOST_CONFIG

    displayName: '$(TEST_TARGET) Build & Test'
  - task: PublishTestResults@2
    inputs:
      testResultsFormat: 'cTest'
      testResultsFiles: '**/Test.xml'
      testRunTitle: '$(TEST_TARGET) Tests'
      failTaskOnFailedTests: true

- job: Check_Style
  variables:
    DO_STYLE_CHECK: 'yes'
    VM_ImageName: 'ubuntu-18.04'
    Compiler_ImageName: 'seracllnl/tpls:clang-10'
    CMAKE_EXTRA_FLAGS: ''
    COMPILER: 'clang++'
    TEST_TARGET: 'linux_clang10'
    HOST_CONFIG: 'docker-linux-ubuntu18.04-x86_64-clang@10.0.0'
  pool:
      vmImage: $(VM_ImageName)
  steps:
  - checkout: self
    clean: true
    submodules: recursive
  - script:  |
      echo " -e $TEST_TARGET -e $COMPILER -e $DO_STYLE_CHECK -e $CMAKE_EXTRA_FLAGS $(Compiler_ImageName) ./scripts/azure-pipelines/linux-check.sh"
      docker run --rm -v `pwd`:/home/serac/serac -e TEST_TARGET -e COMPILER -e DO_STYLE_CHECK -e HOST_CONFIG -e CMAKE_EXTRA_FLAGS $(Compiler_ImageName) ./serac/scripts/azure-pipelines/linux-check.sh
    displayName: '$(TEST_TARGET) Style Check'
